name: CICD_Pipeline

on:
  push: ## Push 
  pull_request: ## PR


jobs:
  pylint_check: ## Pylint check
  
    runs-on: ubuntu-latest # Set up virtual environment
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"] # Specify python version
        
    steps:

    - uses: actions/checkout@v3 # Get code

    - name: Set up Python ${{ matrix.python-version }} # Set up python with versions in matrix
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies # Install & Upgrade
      run: | # Upgrade 'pip' to latest version, install all package in 'requirements.txt'
        python -m pip install --upgrade pip 
        pip install -r requirements.txt
        
    - name: Analysing the code with pylint # Analyze all file end with '.py', excluding ccs.py
      run: |
        pylint $(git ls-files '*.py' | grep -v 'scripts/ccs.py') > pylint_output.txt || true

    - name: Post Pylint results to PR comment
      uses: actions/github-script@v6
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
            const fs = require('fs');
            const pylintOutput = fs.readFileSync('pylint_output.txt', 'utf8');
            const issue_number = context.payload.pull_request.number;
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const commentBody = `### Pylint Report\n\`\`\`${pylintOutput}\`\`\``;
  
            // Post the comment to the PR
            await github.rest.issues.createComment({
              owner,
              repo,
              issue_number,
              body: commentBody
            });

  CCS_check: ### CCS check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set execute permission
        run: chmod +x ./scripts/ccs.py

      - name: Execute CCS
        run: ./scripts/ccs.py





